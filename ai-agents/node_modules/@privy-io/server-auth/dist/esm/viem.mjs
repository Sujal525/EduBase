import{toHex as e}from"viem";import{toAccount as t}from"viem/accounts";import{PrivyClientError as a}from"./errors.mjs";import{r}from"./utils-C7u2kNB0.mjs";import"node-fetch-native";import"ts-case-convert";const i=async i=>{let{walletId:s,address:n,privy:p}=i;return t({address:n,signMessage:async({message:e})=>{let t=o(e),{signature:a}=await p.walletApi.ethereum.signMessage({walletId:s,message:t});return a},signTypedData:async t=>{let{message:i,domain:n,types:o,primaryType:m}=r(t,e);if(!n)throw new a("typedData.domain must be defined");if(!i||!o)throw new a("typedData.message must be defined");let{signature:d}=await p.walletApi.ethereum.signTypedData({walletId:s,typedData:{domain:n,message:i,primaryType:m,types:o}});return d},signTransaction:async e=>{let t=m(e),{signedTransaction:a}=await p.walletApi.ethereum.signTransaction({walletId:s,transaction:t});return a}})};let s=e=>{if("legacy"===e)return 0;if("eip2930"===e)return 1;if("eip1559"==e||void 0===e)return 2;throw new a("EIP4844 and EIP7702 transaction types are not yet supported.")},n=e=>{if(e)return`0x${e.toString(16)}`},o=e=>"string"==typeof e?e:"string"==typeof e.raw?Uint8Array.from(Buffer.from(e.raw.slice(2),"hex")):e.raw,m=e=>({to:e.to??void 0,nonce:e.nonce,chainId:e.chainId,data:e.data,value:n(e.value),type:s(e.type),gasLimit:n(e.gas),gasPrice:n(e.gasPrice),maxFeePerGas:n(e.maxFeePerGas),maxPriorityFeePerGas:n(e.maxPriorityFeePerGas)});export{i as createViemAccount};
