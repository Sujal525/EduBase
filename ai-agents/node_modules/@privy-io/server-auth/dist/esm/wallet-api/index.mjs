import{PrivyClientError as a}from"../errors.mjs";import{getWalletApiSearchPath as t,getWalletApiGetPath as e,getPolicyPath as i,updatePolicyPath as r,deletePolicyPath as n,getTransactionGetPath as s,getWalletApiCreatePath as o,getWalletApiRpcPath as d,createPolicyPath as c,getDelegatedActionsRpcPath as p}from"../paths.mjs";import{g as h}from"../utils-C7u2kNB0.mjs";import{convertPolicyResonseToPolicy as m,convertPolicyCreateRequestToPolicy as l,convertPolicyCreateRuleToPolicyRule as u}from"./mappers.mjs";import{EthereumRpcApi as y}from"./rpc/ethereum.mjs";import{SolanaRpcApi as g}from"./rpc/solana.mjs";import{extractIdempotencyKeyHeader as _,serializePayloadToBuffer as f,formatRpcBodyAsSignaturePayload as w,signWithP256 as v,normalizeP256PrivateKeyToScalar as P}from"./utils.mjs";import"node-fetch-native";import"ts-case-convert";import"@noble/curves/p256";import"@noble/hashes/sha256";import"canonicalize";import"../constants.mjs";function T(a,t){if(!Object.prototype.hasOwnProperty.call(a,t))throw TypeError("attempted to use private field on non-instance");return a}var I=0,b="__private_"+I+++"__getRequestHeaders";class z{async getWallets(a={}){let{cursor:e,limit:i,chainType:r}=a,{data:n}=await this.api.get(t()+h({cursor:e,limit:i,chain_type:r}));return{nextCursor:n.next_cursor??void 0,data:n.data.map((a=>({id:a.id,address:a.address,chainType:a.chain_type,policyIds:a.policy_ids,createdAt:new Date(a.created_at)})))}}async getWallet({id:a}){let{data:t}=await this.api.get(e(a));return{id:t.id,chainType:t.chain_type,address:t.address,policyIds:t.policy_ids,createdAt:new Date(t.created_at)}}async getPolicy({id:a}){let{data:t}=await this.api.get(i(a));return m(t)}async createPolicy(a){let t=c(),e=l(a),{data:i}=await this.api.post(t,e,{headers:T(this,b)[b]({path:t,body:e,method:"POST"})});return m(i)}async updatePolicy(a){let t=r(a.id),e={name:a.name,rules:a.rules?u(a.rules):void 0},{data:i}=await this.api.patch(t,e,{headers:T(this,b)[b]({path:t,body:e,method:"PATCH"})});return m(i)}async deletePolicy(a){let t=n(a.id),e={};await this.api.delete(t,e,{headers:T(this,b)[b]({path:t,body:e,method:"DELETE"})})}async getTransaction({id:a}){let{data:t}=await this.api.get(s(a));return{id:t.id,walletId:t.wallet_id,caip2:t.caip2,transactionHash:t.transaction_hash,status:t.status}}async create(a){return await this.createWallet(a)}async createWallet(a){let t,{chainType:e,authorizationKeyIds:i,authorizationThreshold:r}=a,n={};"ownerId"in a&&a.ownerId?n={owner_id:a.ownerId}:"owner"in a&&a.owner&&(n={owner:{public_key:a.owner.publicKey}});let s={};"authorizationKeyIds"in a||"authorizationThreshold"in a?s={authorization_key_ids:i,authorization_threshold:r}:"additionalSigners"in a&&a.additionalSigners&&(s={additional_signers:a.additionalSigners.map((a=>({signer_id:a.signerId})))});let d={chain_type:e,...n,...s},c=_(a),p=f(w({body:d,url:`${this.api.baseURL}${o()}`,appId:this.appId,idempotencyKeyHeader:c}));this.authorizationPrivateKey&&(t=v(p,this.authorizationPrivateKey));let h=void 0!==t?{"privy-authorization-signature":t.toString("base64")}:void 0,{data:m}=await this.api.post(o(),d,{headers:{...h,...c}});return{id:m.id,address:m.address,chainType:m.chain_type,policyIds:m.policy_ids,createdAt:new Date(m.created_at)}}async rpc(t){let e,i;if("walletId"in t)e=d(t.walletId);else{if(!("address"in t)||!("chainType"in t))throw new a("Invalid RPC payload. Must include `address` and `chainType` or `walletId`.");e=p()}let r=function(a){let{method:t,params:e}=a,i="address"in a?{address:a.address,chain_type:a.chainType}:{wallet_id:a.walletId};switch(t){case"signTransaction":return{...i,method:t,params:{transaction:Buffer.from(e.transaction.serialize({verifySignatures:!1})).toString("base64"),encoding:"base64"}};case"signMessage":{let a=Buffer.from(e.message).toString("base64");return{...i,method:t,params:{message:a,encoding:"base64"}}}case"signAndSendTransaction":return{...i,method:t,caip2:a.caip2,params:{transaction:Buffer.from(e.transaction.serialize({verifySignatures:!1})).toString("base64"),encoding:"base64"}};case"eth_signTransaction":return{...i,method:t,params:{transaction:{from:e.transaction.from,to:e.transaction.to,nonce:e.transaction.nonce,chain_id:e.transaction.chainId,data:e.transaction.data,value:e.transaction.value,type:e.transaction.type,gas_limit:e.transaction.gasLimit,gas_price:e.transaction.gasPrice,max_fee_per_gas:e.transaction.maxFeePerGas,max_priority_fee_per_gas:e.transaction.maxPriorityFeePerGas}}};case"personal_sign":let r;return r=e.message instanceof Uint8Array?{message:Buffer.from(e.message).toString("hex"),encoding:"hex"}:e.message.startsWith("0x")?{message:e.message,encoding:"hex"}:{message:e.message,encoding:"utf-8"},{...i,method:t,params:r};case"eth_signTypedData_v4":return{...i,method:t,params:{typed_data:{domain:e.typedData.domain,types:e.typedData.types,message:e.typedData.message,primary_type:e.typedData.primaryType}}};case"eth_sendTransaction":return{...i,method:t,caip2:a.caip2,params:{transaction:{from:e.transaction.from,to:e.transaction.to,nonce:e.transaction.nonce,chain_id:e.transaction.chainId,data:e.transaction.data,value:e.transaction.value,type:e.transaction.type,gas_limit:e.transaction.gasLimit,gas_price:e.transaction.gasPrice,max_fee_per_gas:e.transaction.maxFeePerGas,max_priority_fee_per_gas:e.transaction.maxPriorityFeePerGas}}};default:throw Error(`Unsupported method: ${t}`)}}(t),n=_(t),s=f(w({body:r,url:`${this.api.baseURL}${e}`,appId:this.appId,idempotencyKeyHeader:n}));this.authorizationPrivateKey&&(i=v(s,this.authorizationPrivateKey));let o=void 0!==i?{"privy-authorization-signature":i.toString("base64")}:void 0,{data:c}=await this.api.post(e,r,{headers:{...o,...n}});return await async function(a,t){switch(t.method){case"signMessage":return{method:t.method,data:{signature:Buffer.from(t.data.signature,"base64")}};case"signTransaction":let e,i=a.params.transaction,r=Buffer.from(t.data.signed_transaction,"base64"),{Transaction:n,VersionedTransaction:s}=await import("@solana/web3.js");return e="version"in i?s.deserialize(r):n.from(r),{method:t.method,data:{signedTransaction:e}};case"signAndSendTransaction":if(t.data)return{method:t.method,data:{transactionId:t.data.transaction_id,hash:t.data.hash,caip2:t.data.caip2}};if(t.error)return{method:t.method,error:{code:t.error.code,message:t.error.message}};throw Error("Unexpected API response to signAndSendTransaction");case"eth_signTransaction":return{method:t.method,data:{signedTransaction:t.data.signed_transaction,encoding:t.data.encoding}};case"eth_sendTransaction":if(t.data)return{method:t.method,data:{transactionId:t.data.transaction_id,hash:t.data.hash,caip2:t.data.caip2}};if(t.error)return{method:t.method,error:{code:t.error.code,message:t.error.message}};throw Error("Unexpected API response to eth_sendTransaction");case"personal_sign":case"eth_signTypedData_v4":return{method:t.method,data:{signature:t.data.signature,encoding:t.data.encoding}};default:throw Error("Unsupported method")}}(t,c)}constructor({appId:a,api:t,authorizationPrivateKey:e}){Object.defineProperty(this,b,{value:K}),this.authorizationPrivateKey=null,this.api=t,e&&(this.authorizationPrivateKey=P(e)),this.appId=a,this.ethereum=new y({appId:a,api:t,authorizationPrivateKey:this.authorizationPrivateKey}),this.solana=new g({appId:a,api:t,authorizationPrivateKey:this.authorizationPrivateKey})}}function K({path:a,body:t,idempotencyKey:e,method:i}){let r,n=_({idempotencyKey:e}),s=f({version:1,method:i,url:`${this.api.baseURL}${a}`,body:t,headers:{"privy-app-id":this.appId,...n}});this.authorizationPrivateKey&&(r=v(s,this.authorizationPrivateKey));let o={...n};return void 0!==r&&(o["privy-authorization-signature"]=r.toString("base64")),o}export{z as WalletApi};
