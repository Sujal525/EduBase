import{PrivyApiError as a}from"../../errors.mjs";import{inferRpcPath as i,extractWalletIdentifier as t,extractIdempotencyKeyHeader as e,createAuthSignatureHeader as s}from"../utils.mjs";import"@noble/curves/p256";import"@noble/hashes/sha256";import"canonicalize";import"../../constants.mjs";import"../../paths.mjs";class r{async signMessage(a){let r=i(a),n={...t(a),method:"signMessage",params:{message:Buffer.from(a.message).toString("base64"),encoding:"base64"}},o=e(a),p=await s({apiBody:n,baseURL:this.api.baseURL,path:r,appId:this.appId,idempotencyKeyHeader:o,authorizationPrivateKey:this.authorizationPrivateKey}),{data:d}=await this.api.post(r,n,{headers:{...p,...o}});return{signature:Buffer.from(d.data.signature,"base64")}}async signTransaction(a){let r=i(a),n=t(a),o="version"in a.transaction,p={...n,method:"signTransaction",params:{transaction:Buffer.from(a.transaction.serialize({verifySignatures:!1})).toString("base64"),encoding:"base64"}},d=e(a),h=await s({apiBody:p,baseURL:this.api.baseURL,path:r,appId:this.appId,idempotencyKeyHeader:d,authorizationPrivateKey:this.authorizationPrivateKey}),{data:c}=await this.api.post(r,p,{headers:{...h,...d}}),m=Buffer.from(c.data.signed_transaction,"base64"),{Transaction:u,VersionedTransaction:g}=await import("@solana/web3.js");return{signedTransaction:o?g.deserialize(m):u.from(m)}}async signAndSendTransaction(r){let n=i(r),o={...t(r),method:"signAndSendTransaction",caip2:r.caip2,params:{transaction:Buffer.from(r.transaction.serialize({verifySignatures:!1})).toString("base64"),encoding:"base64"}},p=e(r),d=await s({apiBody:o,baseURL:this.api.baseURL,path:n,appId:this.appId,idempotencyKeyHeader:p,authorizationPrivateKey:this.authorizationPrivateKey}),{data:h}=await this.api.post(n,o,{headers:{...d,...p}});if(h.data)return{hash:h.data.hash,caip2:h.data.caip2};if(h.error)throw new a(h.error.code,null,h.error.message);throw Error("Unexpected API response to signAndSendTransaction")}constructor({appId:a,api:i,authorizationPrivateKey:t}){this.authorizationPrivateKey=null,this.api=i,this.appId=a,t&&(this.authorizationPrivateKey=t)}}export{r as SolanaRpcApi};
