"use strict";var e=require("@noble/curves/p256"),r=require("@noble/hashes/sha256"),t=require("canonicalize"),a=require("../constants.js"),i=require("../errors.js"),n=require("../paths.js");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var d=/*#__PURE__*/o(t);const l=e=>Buffer.from(d.default(e)),s=(t,a)=>{let i=e.p256.sign(r.sha256(t),a).toDERRawBytes();return Buffer.from(i)},p=({body:e,url:r,appId:t,idempotencyKeyHeader:a})=>({version:1,method:"POST",url:r,body:e,headers:{"privy-app-id":t,...a}});exports.createAuthSignatureHeader=async({apiBody:e,baseURL:r,path:t,appId:a,idempotencyKeyHeader:i,authorizationPrivateKey:n})=>{if("bigint"!=typeof n)return;let o=p({body:e,url:`${r}${t}`,appId:a,idempotencyKeyHeader:i}),d=l(o);return{"privy-authorization-signature":s(d,n).toString("base64")}},exports.extractIdempotencyKeyHeader=e=>{if(void 0!==e.idempotencyKey)return{"privy-idempotency-key":e.idempotencyKey}},exports.extractWalletIdentifier=e=>{if("walletId"in e)return{wallet_id:e.walletId};if("address"in e&&"chainType"in e)return{address:e.address,chain_type:e.chainType};throw new i.PrivyClientError("Invalid RPC payload. Must include `address` and `chainType` or `walletId`.")},exports.formatRpcBodyAsSignaturePayload=p,exports.inferRpcPath=e=>{let r;if("walletId"in e)r=n.getWalletApiRpcPath(e.walletId);else{if(!("address"in e)||!("chainType"in e))throw new i.PrivyClientError("Invalid RPC payload. Must include `address` and `chainType` or `walletId`.");r=n.getDelegatedActionsRpcPath()}return r},exports.normalizeP256PrivateKeyToScalar=r=>{let t=r.replace(a.AUTHORIZATION_PRIVATE_KEY_PREFIX,"").replace(a.WALLET_API_PRIVATE_KEY_PREFIX,""),n=Buffer.from(t,"base64"),o=n.indexOf(Buffer.from([4,32]));if(-1===o)throw new i.PrivyClientError("Invalid wallet authorization private key");let d=n.subarray(o+2,o+34);return e.p256.utils.normPrivateKeyToScalar(d)},exports.serializePayloadToBuffer=l,exports.signWithP256=s;
